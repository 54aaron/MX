type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMI
  | COMMA
  | TRANSPOSE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | IF
  | ELIF
  | ELSE
  | WHILE
  | FOR
  | NOT
  | NOELSE
  | INT
  | BOOL
  | FLOAT
  | STRING
  | CONTINUE
  | BREAK
  | RETURN
  | MATRIX
  | VOID
  | NULL
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | AND
  | OR
  | MXPLUS
  | MXMINUS
  | MXMX
  | MXSCALE
  | LITERAL of (int)
  | ID of (string)
  | FLIT of (string)
  | BLIT of (bool)
  | STRINGLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACKET *);
  262 (* RBRACKET *);
  263 (* SEMI *);
  264 (* COMMA *);
  265 (* TRANSPOSE *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* EQ *);
  272 (* IF *);
  273 (* ELIF *);
  274 (* ELSE *);
  275 (* WHILE *);
  276 (* FOR *);
  277 (* NOT *);
  278 (* NOELSE *);
  279 (* INT *);
  280 (* BOOL *);
  281 (* FLOAT *);
  282 (* STRING *);
  283 (* CONTINUE *);
  284 (* BREAK *);
  285 (* RETURN *);
  286 (* MATRIX *);
  287 (* VOID *);
  288 (* NULL *);
  289 (* NEQ *);
  290 (* LT *);
  291 (* GT *);
  292 (* LEQ *);
  293 (* GEQ *);
  294 (* AND *);
  295 (* OR *);
  296 (* MXPLUS *);
  297 (* MXMINUS *);
  298 (* MXMX *);
  299 (* MXSCALE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* LITERAL *);
  301 (* ID *);
  302 (* FLIT *);
  303 (* BLIT *);
  304 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\010\000\011\000\011\000\011\000\012\000\012\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\008\000\008\000\016\000\016\000\014\000\
\014\000\017\000\017\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\003\000\000\000\003\000\005\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\003\000\004\000\003\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\002\000\000\000\001\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\068\000\000\000\010\000\011\000\013\000\012\000\
\014\000\015\000\001\000\003\000\004\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\008\000\000\000\000\000\016\000\
\000\000\000\000\009\000\017\000\000\000\000\000\000\000\000\000\
\060\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\026\000\027\000\029\000\030\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\055\000\023\000\000\000\019\000\000\000\000\000\000\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\024\000\000\000\
\000\000\059\000\000\000\000\000\022\000\000\000\000\000\057\000\
\000\000\000\000\058\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\019\000\026\000\030\000\
\020\000\047\000\053\000\084\000\048\000\092\000\049\000\060\000\
\093\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\222\254\012\255\086\255\
\000\000\223\254\029\255\060\255\000\000\066\255\086\255\000\000\
\035\255\086\255\000\000\000\000\036\255\054\255\089\255\005\255\
\000\000\000\000\092\255\005\255\103\255\113\255\114\255\005\255\
\005\255\000\000\004\255\000\000\000\000\000\000\000\000\189\001\
\000\000\146\000\102\255\075\255\048\255\111\255\005\255\005\255\
\005\255\111\255\237\001\118\255\005\255\005\255\000\000\000\000\
\005\255\005\255\005\255\005\255\005\255\005\255\005\255\005\255\
\005\255\005\255\005\255\005\255\005\255\005\255\005\255\005\255\
\000\000\000\000\000\000\081\255\000\000\128\255\188\000\200\000\
\122\255\000\000\237\001\133\255\129\255\237\001\043\000\043\000\
\111\255\111\255\062\002\062\002\051\255\051\255\051\255\051\255\
\027\002\016\002\043\000\043\000\111\255\111\255\000\000\094\255\
\075\255\173\255\173\255\005\255\000\000\005\255\000\000\082\255\
\127\255\000\000\226\001\237\001\000\000\173\255\005\255\000\000\
\134\255\173\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\138\255\
\000\000\000\000\000\000\139\255\000\000\000\000\000\000\000\000\
\000\000\123\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\124\255\000\000\000\000\000\000\000\000\000\000\
\146\255\000\000\220\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\232\255\000\000\000\000\
\146\255\026\000\025\255\000\000\152\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\255\000\000\153\255\013\255\242\000\252\000\
\038\000\080\000\180\001\182\001\086\001\095\001\133\001\142\001\
\149\255\069\255\036\001\046\001\092\000\134\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\161\255\000\000\000\000\077\255\000\000\000\000\156\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\133\000\000\000\247\255\000\000\000\000\127\000\
\000\000\000\000\000\000\048\000\224\255\000\000\208\255\201\255\
\000\000"

let yytablesize = 873
let yytable = "\050\000\
\011\000\089\000\001\000\054\000\061\000\032\000\018\000\058\000\
\059\000\035\000\015\000\021\000\016\000\025\000\050\000\036\000\
\029\000\062\000\017\000\050\000\050\000\066\000\087\000\088\000\
\059\000\040\000\063\000\066\000\091\000\094\000\022\000\063\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\042\000\043\000\044\000\045\000\046\000\085\000\032\000\086\000\
\033\000\034\000\035\000\064\000\065\000\066\000\067\000\068\000\
\036\000\121\000\122\000\023\000\024\000\037\000\047\000\129\000\
\038\000\039\000\040\000\047\000\047\000\128\000\067\000\027\000\
\031\000\131\000\041\000\123\000\067\000\124\000\111\000\125\000\
\112\000\112\000\077\000\078\000\079\000\080\000\059\000\017\000\
\052\000\042\000\043\000\044\000\045\000\046\000\032\000\055\000\
\033\000\082\000\035\000\047\000\005\000\006\000\007\000\008\000\
\036\000\056\000\057\000\009\000\010\000\037\000\083\000\064\000\
\038\000\039\000\040\000\060\000\090\000\060\000\060\000\060\000\
\116\000\020\000\041\000\020\000\113\000\060\000\117\000\130\000\
\118\000\119\000\060\000\006\000\007\000\060\000\060\000\060\000\
\126\000\042\000\043\000\044\000\045\000\046\000\046\000\060\000\
\062\000\064\000\065\000\046\000\046\000\062\000\028\000\051\000\
\120\000\056\000\000\000\056\000\056\000\056\000\060\000\060\000\
\060\000\060\000\060\000\056\000\000\000\032\000\000\000\033\000\
\056\000\035\000\000\000\056\000\056\000\056\000\000\000\036\000\
\000\000\000\000\046\000\046\000\037\000\056\000\000\000\038\000\
\039\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\043\000\044\000\045\000\046\000\028\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\048\000\028\000\000\000\000\000\000\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\000\000\005\000\
\006\000\007\000\008\000\049\000\000\000\000\000\009\000\010\000\
\049\000\049\000\000\000\049\000\049\000\049\000\049\000\033\000\
\049\000\000\000\000\000\000\000\033\000\033\000\000\000\033\000\
\033\000\033\000\033\000\064\000\033\000\000\000\067\000\068\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\034\000\000\000\000\000\079\000\080\000\034\000\034\000\
\000\000\034\000\034\000\034\000\034\000\037\000\034\000\000\000\
\000\000\000\000\037\000\037\000\000\000\037\000\037\000\037\000\
\037\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\038\000\
\000\000\000\000\000\000\000\000\038\000\038\000\000\000\038\000\
\038\000\038\000\038\000\081\000\038\000\000\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\000\000\
\069\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\114\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\065\000\066\000\067\000\
\068\000\115\000\069\000\000\000\000\000\000\000\000\000\000\000\
\064\000\065\000\066\000\067\000\068\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\031\000\000\000\000\000\000\000\000\000\
\031\000\031\000\000\000\031\000\031\000\032\000\000\000\000\000\
\031\000\000\000\032\000\032\000\000\000\032\000\032\000\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\035\000\000\000\000\000\
\000\000\000\000\035\000\035\000\000\000\035\000\035\000\036\000\
\000\000\000\000\035\000\000\000\036\000\036\000\000\000\036\000\
\036\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\042\000\
\000\000\000\000\000\000\000\000\042\000\042\000\000\000\000\000\
\044\000\000\000\000\000\000\000\042\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\043\000\000\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\045\000\
\000\000\000\000\000\000\043\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\040\000\000\000\041\000\
\000\000\000\000\040\000\040\000\041\000\041\000\000\000\000\000\
\000\000\000\000\040\000\063\000\041\000\064\000\065\000\066\000\
\067\000\068\000\000\000\069\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\041\000\000\000\
\000\000\040\000\040\000\041\000\041\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\127\000\000\000\064\000\065\000\066\000\067\000\068\000\000\000\
\069\000\000\000\000\000\000\000\000\000\064\000\065\000\066\000\
\067\000\068\000\000\000\069\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\064\000\065\000\066\000\067\000\068\000\000\000\069\000\000\000\
\000\000\000\000\000\000\064\000\065\000\066\000\067\000\068\000\
\000\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\077\000\
\078\000\079\000\080\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\077\000\078\000\079\000\080\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\072\000\073\000\074\000\000\000\000\000\077\000\078\000\079\000\
\080\000"

let yycheck = "\032\000\
\000\000\057\000\001\000\036\000\001\001\001\001\016\000\040\000\
\041\000\005\001\045\001\045\001\001\001\023\000\002\001\011\001\
\026\000\014\001\007\001\007\001\008\001\002\001\055\000\056\000\
\057\000\021\001\002\001\008\001\061\000\062\000\002\001\007\001\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\044\001\045\001\046\001\047\001\048\001\006\001\001\001\008\001\
\003\001\004\001\005\001\009\001\010\001\011\001\012\001\013\001\
\011\001\114\000\115\000\008\001\003\001\016\001\002\001\127\000\
\019\001\020\001\021\001\007\001\008\001\126\000\002\001\045\001\
\045\001\130\000\029\001\116\000\008\001\118\000\006\001\006\001\
\008\001\008\001\040\001\041\001\042\001\043\001\127\000\007\001\
\005\001\044\001\045\001\046\001\047\001\048\001\001\001\001\001\
\003\001\004\001\005\001\039\001\023\001\024\001\025\001\026\001\
\011\001\001\001\001\001\030\001\031\001\016\001\044\001\009\001\
\019\001\020\001\021\001\001\001\007\001\003\001\004\001\005\001\
\007\001\006\001\029\001\008\001\005\001\011\001\002\001\002\001\
\008\001\044\001\016\001\002\001\002\001\019\001\020\001\021\001\
\018\001\044\001\045\001\046\001\047\001\048\001\002\001\029\001\
\007\001\002\001\002\001\007\001\008\001\002\001\026\000\033\000\
\113\000\001\001\255\255\003\001\004\001\005\001\044\001\045\001\
\046\001\047\001\048\001\011\001\255\255\001\001\255\255\003\001\
\016\001\005\001\255\255\019\001\020\001\021\001\255\255\011\001\
\255\255\255\255\038\001\039\001\016\001\029\001\255\255\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\044\001\045\001\046\001\047\001\048\001\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\002\001\015\001\255\255\255\255\255\255\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\002\001\255\255\255\255\030\001\031\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\002\001\
\015\001\255\255\255\255\255\255\007\001\008\001\255\255\010\001\
\011\001\012\001\013\001\009\001\015\001\255\255\012\001\013\001\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\002\001\255\255\255\255\042\001\043\001\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\002\001\015\001\255\255\
\255\255\255\255\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\255\255\010\001\
\011\001\012\001\013\001\002\001\015\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\002\001\015\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\010\001\011\001\002\001\255\255\255\255\
\015\001\255\255\007\001\008\001\255\255\010\001\011\001\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\255\255\010\001\011\001\002\001\
\255\255\255\255\015\001\255\255\007\001\008\001\255\255\010\001\
\011\001\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\002\001\255\255\255\255\255\255\015\001\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\002\001\255\255\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\002\001\
\255\255\255\255\255\255\015\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\002\001\255\255\002\001\
\255\255\255\255\007\001\008\001\007\001\008\001\255\255\255\255\
\255\255\255\255\015\001\007\001\015\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\033\001\255\255\
\255\255\038\001\039\001\038\001\039\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMI\000\
  COMMA\000\
  TRANSPOSE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  EQ\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  NOT\000\
  NOELSE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  CONTINUE\000\
  BREAK\000\
  RETURN\000\
  MATRIX\000\
  VOID\000\
  NULL\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  AND\000\
  OR\000\
  MXPLUS\000\
  MXMINUS\000\
  MXMX\000\
  MXSCALE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  FLIT\000\
  BLIT\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 32 "parser.mly"
                   ( _1 )
# 489 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
                     ( ([], []) )
# 495 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 35 "parser.mly"
              ( ((_2 :: fst _1), snd _1) )
# 503 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 36 "parser.mly"
              ( (fst _1, (_2 :: snd _1)) )
# 511 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 39 "parser.mly"
                                           (
        { typ = _1; fname = _2; formals = List.rev _4;
          locals = List.rev _7; body = List.rev _8 } )
# 524 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                           ( [] )
# 530 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 44 "parser.mly"
                          ( _1 )
# 537 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "parser.mly"
                    ( [(_1,_2)] )
# 545 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 47 "parser.mly"
                                        ( (_3,_4) :: _1 )
# 554 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
              ( Int )
# 560 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
              ( Bool )
# 566 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
              ( String )
# 572 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
              ( Float  )
# 578 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
              ( Matrix )
# 584 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
              ( Void )
# 590 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                          ( [] )
# 596 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 58 "parser.mly"
                              ( _2 :: _1 )
# 604 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 61 "parser.mly"
                                                                         ((_1, _2))
# 612 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'row_list) in
    Obj.repr(
# 67 "parser.mly"
                                                                        ( _2 )
# 619 "parser.ml"
               : 'matrix_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                                                                        ( [] )
# 625 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems_list) in
    Obj.repr(
# 71 "parser.mly"
                                                                        ( [[_2]] )
# 632 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'row_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'elems_list) in
    Obj.repr(
# 72 "parser.mly"
                                                                        ( [_4]::_1 )
# 640 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
                                                    ( [_1] )
# 647 "parser.ml"
               : 'elems_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 77 "parser.mly"
                                                    ( _3::_1 )
# 655 "parser.ml"
               : 'elems_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "parser.mly"
                                 ( Literal(_1) )
# 662 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                                 ( Fliteral(_1) )
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 82 "parser.mly"
                                 ( BoolLit(_1) )
# 676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                                 ( Id(_1) )
# 683 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                                 ( Stringlit(_1) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_literal) in
    Obj.repr(
# 85 "parser.mly"
                                 ( Mx(_1) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                 ( Binop(_1, Add, _3) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                 ( Binop(_1, Sub, _3) )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                 ( Binop(_1, Mult, _3) )
# 721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                 ( Binop(_1, Div, _3) )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                 ( Binop( _1, Mxadd,_3) )
# 737 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                 ( Binop( _1, Mxsub, _3) )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                                 ( Binop( _1, Mxtimes, _3) )
# 753 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                 ( Binop( _1, Mxscale, _3) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                 ( Unop( Transpose, _1) )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                 ( Binop(_1, Equal, _3) )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                 ( Binop(_1, Neq, _3) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                 ( Binop(_1, Less, _3) )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                 ( Binop(_1, Leq, _3) )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                 ( Binop(_1, Greater, _3) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                 ( Binop(_1, Geq, _3) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                 ( Binop(_1, And, _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                 ( Binop(_1, Or, _3) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                 ( Unop(Neg, _2) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                 ( Unop(Not, _2) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                 ( Assign(_1, _3) )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 106 "parser.mly"
                                 ( Call(_1, _3) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                                 ( _2 )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                                                              ( Expr _1               )
# 876 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 113 "parser.mly"
                                                              ( Return _2             )
# 883 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 114 "parser.mly"
                                                              ( Block(List.rev _2)    )
# 890 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 115 "parser.mly"
                                                              ( If(_3, _5, Block([])) )
# 898 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 116 "parser.mly"
                                                              ( If(_3, _5, _7)        )
# 907 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 117 "parser.mly"
                                                              ( For(_3, _5, _7, _9)   )
# 917 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 118 "parser.mly"
                                                              ( While(_3, _5)         )
# 925 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                   ( [] )
# 931 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 122 "parser.mly"
                   ( _2 :: _1 )
# 939 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
              ( Noexpr )
# 945 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
       ( _1 )
# 952 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
              ( [] )
# 958 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 130 "parser.mly"
            ( List.rev _1 )
# 965 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
     ( [_1] )
# 972 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                       ( _3 :: _1 )
# 980 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
