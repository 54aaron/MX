type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMI
  | COMMA
  | TRANSPOSE
  | NUMROWS
  | NUMCOLS
  | ZEROS
  | ONE
  | PRINT
  | ADDROW
  | ADDCOL
  | RANK
  | IDENTITY
  | DOT
  | ROTATE
  | REFLX
  | REFLY
  | REFLYX
  | REFLO
  | REFLNEGX
  | SHEARH
  | SHEARV
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | IF
  | ELIF
  | ELSE
  | WHILE
  | FOR
  | NOT
  | NOELSE
  | INT
  | BOOL
  | FLOAT
  | STRING
  | CONTINUE
  | BREAK
  | RETURN
  | MATRIX
  | VOID
  | NULL
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | AND
  | OR
  | MXPLUS
  | MXMINUS
  | MXMX
  | MXSCALE
  | LITERAL of (int)
  | ID of (string)
  | FLIT of (string)
  | BLIT of (bool)
  | MX of (array)
  | STRINGLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 76 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACKET *);
  262 (* RBRACKET *);
  263 (* SEMI *);
  264 (* COMMA *);
  265 (* TRANSPOSE *);
  266 (* NUMROWS *);
  267 (* NUMCOLS *);
  268 (* ZEROS *);
  269 (* ONE *);
  270 (* PRINT *);
  271 (* ADDROW *);
  272 (* ADDCOL *);
  273 (* RANK *);
  274 (* IDENTITY *);
  275 (* DOT *);
  276 (* ROTATE *);
  277 (* REFLX *);
  278 (* REFLY *);
  279 (* REFLYX *);
  280 (* REFLO *);
  281 (* REFLNEGX *);
  282 (* SHEARH *);
  283 (* SHEARV *);
  284 (* PLUS *);
  285 (* MINUS *);
  286 (* TIMES *);
  287 (* DIVIDE *);
  288 (* ASSIGN *);
  289 (* EQ *);
  290 (* IF *);
  291 (* ELIF *);
  292 (* ELSE *);
  293 (* WHILE *);
  294 (* FOR *);
  295 (* NOT *);
  296 (* NOELSE *);
  297 (* INT *);
  298 (* BOOL *);
  299 (* FLOAT *);
  300 (* STRING *);
  301 (* CONTINUE *);
  302 (* BREAK *);
  303 (* RETURN *);
  304 (* MATRIX *);
  305 (* VOID *);
  306 (* NULL *);
  307 (* NEQ *);
  308 (* LT *);
  309 (* GT *);
  310 (* LEQ *);
  311 (* GEQ *);
  312 (* AND *);
  313 (* OR *);
  314 (* MXPLUS *);
  315 (* MXMINUS *);
  316 (* MXMX *);
  317 (* MXSCALE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  318 (* LITERAL *);
  319 (* ID *);
  320 (* FLIT *);
  321 (* BLIT *);
  322 (* MX *);
  323 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\003\000\003\000\003\000\011\000\011\000\011\000\
\012\000\012\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\008\000\008\000\015\000\015\000\
\013\000\013\000\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\005\000\008\000\008\000\000\000\003\000\005\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\002\000\000\000\001\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\069\000\000\000\010\000\011\000\013\000\012\000\
\000\000\015\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\000\000\028\000\
\029\000\031\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\009\000\
\052\000\000\000\023\000\000\000\020\000\000\000\021\000\017\000\
\000\000\000\000\000\000\026\000\000\000\000\000\061\000\005\000\
\000\000\000\000\000\000\000\000\000\000\062\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\056\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\058\000\000\000\000\000\059\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\025\000\095\000\106\000\
\026\000\117\000\065\000\091\000\071\000\118\000\125\000\072\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\207\254\000\000\000\000\000\000\000\000\210\254\247\254\015\255\
\014\255\241\255\000\000\127\255\051\255\064\255\000\000\009\255\
\071\255\082\255\127\255\127\255\127\255\000\000\026\255\000\000\
\000\000\000\000\020\001\086\255\086\255\000\000\102\255\241\255\
\193\255\249\254\249\254\127\255\127\255\000\000\000\000\127\255\
\127\255\127\255\127\255\127\255\127\255\127\255\127\255\127\255\
\127\255\127\255\127\255\127\255\127\255\127\255\127\255\050\255\
\098\255\109\255\000\000\053\255\000\000\073\001\130\255\112\255\
\073\001\210\255\210\255\249\254\249\254\179\001\179\001\188\001\
\188\001\188\001\188\001\141\001\126\001\073\001\073\001\073\001\
\073\001\000\000\118\255\133\255\132\255\134\255\059\000\000\000\
\000\000\127\255\000\000\083\255\000\000\050\255\000\000\000\000\
\089\255\045\255\073\001\000\000\121\255\043\255\000\000\000\000\
\153\255\154\255\156\255\127\255\033\001\000\000\000\000\084\255\
\127\255\127\255\127\255\073\001\158\255\000\000\000\000\023\000\
\037\000\160\255\000\000\141\255\141\255\127\255\147\255\000\000\
\088\001\141\255\127\255\000\000\161\255\141\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\166\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\182\255\000\000\000\000\000\000\000\000\206\255\000\000\
\000\000\000\000\000\000\145\255\145\255\000\000\000\000\000\000\
\000\000\097\000\104\000\183\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\255\000\000\192\255\
\069\255\174\000\181\000\111\000\167\000\244\000\246\000\011\255\
\223\255\209\000\237\000\003\255\013\255\087\255\169\255\179\255\
\225\255\000\000\000\000\000\000\000\000\000\000\096\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\255\000\000\000\000\000\000\000\000\
\000\000\000\000\189\255\091\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\135\255\000\000\
\000\000\000\000\207\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\117\000\000\000\242\255\000\000\000\000\106\000\
\000\000\236\255\191\000\116\000\000\000\078\000\178\255\000\000"

let yytablesize = 761
let yytable = "\035\000\
\011\000\047\000\001\000\024\000\047\000\067\000\041\000\042\000\
\043\000\047\000\047\000\067\000\043\000\015\000\048\000\018\000\
\016\000\043\000\043\000\048\000\048\000\019\000\017\000\070\000\
\073\000\068\000\044\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\043\000\130\000\027\000\020\000\111\000\
\112\000\019\000\060\000\061\000\062\000\063\000\021\000\036\000\
\022\000\045\000\047\000\047\000\141\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\037\000\048\000\051\000\038\000\
\039\000\028\000\020\000\051\000\051\000\107\000\113\000\068\000\
\105\000\114\000\115\000\029\000\027\000\068\000\111\000\127\000\
\036\000\040\000\064\000\116\000\064\000\036\000\036\000\124\000\
\061\000\064\000\061\000\061\000\128\000\129\000\124\000\092\000\
\067\000\093\000\030\000\031\000\032\000\033\000\034\000\090\000\
\028\000\137\000\094\000\096\000\093\000\113\000\124\000\098\000\
\114\000\115\000\029\000\099\000\061\000\100\000\119\000\027\000\
\100\000\061\000\116\000\097\000\061\000\061\000\061\000\057\000\
\102\000\057\000\057\000\101\000\103\000\027\000\061\000\111\000\
\108\000\030\000\031\000\032\000\033\000\034\000\022\000\110\000\
\022\000\121\000\122\000\028\000\123\000\061\000\061\000\061\000\
\061\000\061\000\142\000\057\000\131\000\029\000\134\000\006\000\
\057\000\028\000\037\000\057\000\057\000\057\000\113\000\037\000\
\037\000\114\000\115\000\029\000\038\000\057\000\138\000\007\000\
\065\000\038\000\038\000\116\000\030\000\031\000\032\000\033\000\
\034\000\066\000\069\000\063\000\057\000\057\000\057\000\057\000\
\057\000\047\000\030\000\031\000\032\000\033\000\034\000\030\000\
\063\000\135\000\136\000\104\000\030\000\030\000\030\000\140\000\
\120\000\109\000\047\000\143\000\048\000\049\000\050\000\051\000\
\045\000\052\000\039\000\066\000\000\000\045\000\045\000\039\000\
\039\000\030\000\030\000\030\000\030\000\000\000\030\000\050\000\
\051\000\000\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\000\000\045\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\060\000\061\000\062\000\063\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\132\000\005\000\006\000\007\000\008\000\000\000\000\000\047\000\
\023\000\010\000\000\000\000\000\000\000\000\000\133\000\000\000\
\000\000\005\000\006\000\007\000\008\000\047\000\000\000\000\000\
\009\000\010\000\048\000\049\000\050\000\051\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\052\000\000\000\000\000\
\000\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\049\000\005\000\006\000\007\000\008\000\049\000\
\049\000\050\000\009\000\010\000\000\000\000\000\050\000\050\000\
\034\000\000\000\000\000\000\000\000\000\034\000\034\000\000\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\000\000\049\000\000\000\050\000\050\000\050\000\050\000\000\000\
\050\000\000\000\034\000\034\000\034\000\034\000\000\000\034\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\035\000\000\000\000\000\000\000\000\000\035\000\035\000\032\000\
\000\000\000\000\000\000\000\000\032\000\032\000\033\000\000\000\
\000\000\000\000\000\000\033\000\033\000\000\000\000\000\000\000\
\000\000\000\000\035\000\035\000\035\000\035\000\000\000\035\000\
\000\000\032\000\032\000\000\000\000\000\000\000\032\000\000\000\
\033\000\033\000\044\000\000\000\000\000\033\000\000\000\044\000\
\044\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\046\000\000\000\
\000\000\044\000\000\000\046\000\046\000\041\000\000\000\042\000\
\000\000\000\000\041\000\041\000\042\000\042\000\000\000\000\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\042\000\000\000\
\000\000\000\000\046\000\000\000\047\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\041\000\126\000\
\042\000\047\000\000\000\041\000\041\000\042\000\042\000\048\000\
\049\000\050\000\051\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\000\000\052\000\000\000\000\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\047\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\139\000\000\000\
\047\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\000\000\
\052\000\000\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\047\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\047\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\000\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\052\000\000\000\000\000\
\053\000\054\000\055\000\056\000\057\000\058\000\000\000\060\000\
\061\000\062\000\063\000\047\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\047\000\000\000\060\000\061\000\
\062\000\063\000\000\000\000\000\000\000\000\000\048\000\049\000\
\050\000\051\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\055\000\
\056\000\057\000\000\000\000\000\060\000\061\000\062\000\063\000\
\000\000\000\000\000\000\000\000\000\000\060\000\061\000\062\000\
\063\000"

let yycheck = "\020\000\
\000\000\009\001\001\000\018\000\002\001\002\001\027\000\028\000\
\029\000\007\001\008\001\008\001\002\001\063\001\002\001\001\001\
\063\001\007\001\008\001\007\001\008\001\007\001\032\001\044\000\
\045\000\040\000\001\001\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\033\001\123\000\001\001\032\001\003\001\
\004\001\007\001\058\001\059\001\060\001\061\001\041\001\005\001\
\043\001\032\001\056\001\057\001\139\000\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\005\001\057\001\002\001\063\001\
\002\001\029\001\032\001\007\001\008\001\098\000\034\001\002\001\
\095\000\037\001\038\001\039\001\001\001\008\001\003\001\004\001\
\002\001\008\001\005\001\047\001\002\001\007\001\008\001\116\000\
\001\001\007\001\003\001\004\001\121\000\122\000\123\000\006\001\
\003\001\008\001\062\001\063\001\064\001\065\001\066\001\062\001\
\029\001\134\000\006\001\063\001\008\001\034\001\139\000\008\001\
\037\001\038\001\039\001\006\001\029\001\008\001\006\001\001\001\
\008\001\034\001\047\001\002\001\037\001\038\001\039\001\001\001\
\005\001\003\001\004\001\007\001\007\001\001\001\047\001\003\001\
\062\001\062\001\063\001\064\001\065\001\066\001\006\001\063\001\
\008\001\001\001\001\001\029\001\001\001\062\001\063\001\064\001\
\065\001\066\001\002\001\029\001\007\001\039\001\007\001\002\001\
\034\001\029\001\002\001\037\001\038\001\039\001\034\001\007\001\
\008\001\037\001\038\001\039\001\002\001\047\001\036\001\002\001\
\002\001\007\001\008\001\047\001\062\001\063\001\064\001\065\001\
\066\001\002\001\002\001\007\001\062\001\063\001\064\001\065\001\
\066\001\009\001\062\001\063\001\064\001\065\001\066\001\002\001\
\002\001\132\000\133\000\095\000\007\001\008\001\009\001\138\000\
\111\000\102\000\009\001\142\000\028\001\029\001\030\001\031\001\
\002\001\033\001\002\001\037\000\255\255\007\001\008\001\007\001\
\008\001\028\001\029\001\030\001\031\001\255\255\033\001\030\001\
\031\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\255\255\033\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\058\001\059\001\060\001\061\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\002\001\041\001\042\001\043\001\044\001\255\255\255\255\009\001\
\048\001\049\001\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\041\001\042\001\043\001\044\001\009\001\255\255\255\255\
\048\001\049\001\028\001\029\001\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\255\255\033\001\255\255\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\002\001\041\001\042\001\043\001\044\001\007\001\
\008\001\002\001\048\001\049\001\255\255\255\255\007\001\008\001\
\002\001\255\255\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\033\001\255\255\028\001\029\001\030\001\031\001\255\255\
\033\001\255\255\028\001\029\001\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\002\001\255\255\255\255\255\255\255\255\007\001\008\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\002\001\255\255\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\033\001\
\255\255\028\001\029\001\255\255\255\255\255\255\033\001\255\255\
\028\001\029\001\002\001\255\255\255\255\033\001\255\255\007\001\
\008\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\002\001\255\255\
\255\255\033\001\255\255\007\001\008\001\002\001\255\255\002\001\
\255\255\255\255\007\001\008\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\033\001\255\255\
\255\255\255\255\007\001\255\255\009\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\051\001\007\001\
\051\001\009\001\255\255\056\001\057\001\056\001\057\001\028\001\
\029\001\030\001\031\001\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\009\001\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\007\001\255\255\
\009\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\255\255\
\033\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\009\001\255\255\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\009\001\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\255\255\033\001\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\061\001\009\001\255\255\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\009\001\255\255\058\001\059\001\
\060\001\061\001\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\060\001\061\001\
\255\255\255\255\255\255\255\255\255\255\058\001\059\001\060\001\
\061\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMI\000\
  COMMA\000\
  TRANSPOSE\000\
  NUMROWS\000\
  NUMCOLS\000\
  ZEROS\000\
  ONE\000\
  PRINT\000\
  ADDROW\000\
  ADDCOL\000\
  RANK\000\
  IDENTITY\000\
  DOT\000\
  ROTATE\000\
  REFLX\000\
  REFLY\000\
  REFLYX\000\
  REFLO\000\
  REFLNEGX\000\
  SHEARH\000\
  SHEARV\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  EQ\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  NOT\000\
  NOELSE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  CONTINUE\000\
  BREAK\000\
  RETURN\000\
  MATRIX\000\
  VOID\000\
  NULL\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  AND\000\
  OR\000\
  MXPLUS\000\
  MXMINUS\000\
  MXMX\000\
  MXSCALE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  FLIT\000\
  BLIT\000\
  MX\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parser.mly"
                   ( _1 )
# 519 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                     ( ([], []) )
# 525 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
              ( ((_2 :: fst _1), snd _1) )
# 533 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
              ( (fst _1, (_2 :: snd _1)) )
# 541 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 41 "parser.mly"
                                           (
        { typ = _1; fname = _2; formals = List.rev _4;
          locals = List.rev _7; body = List.rev _8 } )
# 554 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
                           ( [] )
# 560 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 46 "parser.mly"
                          ( _1 )
# 567 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
                    ( [(_1,_2)] )
# 575 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                                        ( (_3,_4) :: _1 )
# 584 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
              ( Int )
# 590 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
              ( Bool )
# 596 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
              ( String )
# 602 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
              ( Float  )
# 608 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
              ( Matrix )
# 614 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
              ( Void )
# 620 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                          ( [] )
# 626 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 60 "parser.mly"
                              ( _2 :: _1 )
# 634 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 63 "parser.mly"
                                                                         ((_1, _2, Noexpr))
# 642 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                                                         ((_1,_2, Assign(_2,_4)))
# 651 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'row_list) in
    Obj.repr(
# 65 "parser.mly"
                                                                         ( (_2, _6) )
# 659 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'row_list) in
    Obj.repr(
# 66 "parser.mly"
                                                                         ( (_2, _6) )
# 667 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                                                                        ( [] )
# 673 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems_list) in
    Obj.repr(
# 70 "parser.mly"
                                                                        ( [[_2]] )
# 680 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'row_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'elems_list) in
    Obj.repr(
# 71 "parser.mly"
                                                                        ( [_4]::_1 )
# 688 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 75 "parser.mly"
                                                    ( [_1] )
# 695 "parser.ml"
               : 'elems_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
                                                    ( _3::_1 )
# 703 "parser.ml"
               : 'elems_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 79 "parser.mly"
                                 ( Literal(_1) )
# 710 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                                 ( Fliteral(_1) )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 81 "parser.mly"
                                 ( BoolLit(_1) )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "parser.mly"
                                 ( Id(_1) )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : array) in
    Obj.repr(
# 83 "parser.mly"
                                 ( Mx(_1) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                 ( Binop(_1, Add, _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                 ( Binop(_1, Sub, _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                 ( Binop(_1, Mult, _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                 ( Binop(_1, Div, _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                 ( Binop( _1, Mxadd,_3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                 ( Binop( _1, Mxsub, _3) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                 ( Binop( _1, Mxtimes, _3) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                 ( Binop( _1, Mxscale, _3) )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                                 ( Unop( _1, Transpose) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                 ( Binop(_1, Equal, _3) )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                 ( Binop(_1, Neq, _3) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                 ( Binop(_1, Less, _3) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                 ( Binop(_1, Leq, _3) )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                 ( Binop(_1, Greater, _3) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                 ( Binop(_1, Geq, _3) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                 ( Binop(_1, And, _3) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                 ( Binop(_1, Or, _3) )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                 ( Unop(Neg, _2) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                 ( Unop(Not, _2) )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                 ( Assign(_1, _3) )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 104 "parser.mly"
                                 ( Call(_1, _3) )
# 903 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                 ( _2 )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                                                              ( Expr _1               )
# 917 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 111 "parser.mly"
                                                              ( Return _2             )
# 924 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 112 "parser.mly"
                                                              ( Block(List.rev _2)    )
# 931 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 113 "parser.mly"
                                                              ( If(_3, _5, Block([])) )
# 939 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 114 "parser.mly"
                                                              ( If(_3, _5, _7)        )
# 948 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 115 "parser.mly"
                                                              ( For(_3, _5, _7, _9)   )
# 958 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 116 "parser.mly"
                                                              ( While(_3, _5)         )
# 966 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                   ( [] )
# 972 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 120 "parser.mly"
                   ( _2 :: _1 )
# 980 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
              ( Noexpr )
# 986 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
       ( _1 )
# 993 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
              ( [] )
# 999 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 128 "parser.mly"
            ( List.rev _1 )
# 1006 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
     ( [_1] )
# 1013 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( _3 :: _1 )
# 1021 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
